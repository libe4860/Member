<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.webapp.mapper.MemberMapper">
<!-- resultMap 결과 맵핑을 정의하는 것 , join시에는 필히 resultMap을 써줘야함! -->
<!-- alias를 줌 -->

<resultMap type="Member" id="memberResultMap">
    <id property="id" column="id"/>
    <id property="email" column="email"/>
    <result property="password" column="password"/>
    <result property="name" column="name"/>
    <result property="regdate" column="regdate"/>
</resultMap>
<!-- sql 쿼리의 조각들을 통합시킨다. -->
<sql id="member">
    select id, 
		   email, 
		   password, 
		   name, 
		   regdate 
		from member
</sql>
    
<select id="selectAll" resultMap="memberResultMap">
	<include refid="member"/>
</select>

<select id="select" parameterType="hashmap" resultMap="memberResultMap" databaseId="oracle">
    select outer.rn,
		   outer.id,
	       outer.email,
	       outer.password,
	       outer.name,
	       outer.regdate
	 from (select rownum rn, inner.*
		from(select m.* 
				from member m
			  order by m.id desc
		    ) inner
		  )outer
	 where outer.rn &gt;= #{firstItem}
	  and outer.rn &lt;= #{lastItem}
</select>

<select id="select" parameterType="hashmap" resultMap="memberResultMap" databaseId="mysql">
    <include refid="member"/>
    order by id desc 
    limit #{offset}, #{count}
</select>

<select id="selectById" parameterType="int" resultMap="memberResultMap">
	<include refid="member"/> 
	where id = #{id}
</select>

<!-- email로 조회하는 경우 -->
<select id="selectByEmail" parameterType="string" resultMap="memberResultMap">
	<include refid="member"/> 
	where email = #{email}
</select>

<!-- resultType:반환타입 -->
<select id="selectTotalCount" resultType="int">
    select count(*) from member
</select>

<!-- 채번테이블을 쓸때 쓰기위한 것! -->
<insert id="insertGenerator" parameterType="Member">
    insert into member 
    (
    	id,
    	email,
    	password, 
    	name,
    	regdate
    )
    values
    (
    	#{id},
    	#{email},
    	#{password},
    	#{name},
    	#{regdate}
    	
    )
</insert>

<!-- insert는 return타입 없음 / selectKey:DB가 시퀀스를 지원할 때 사용하는 키-->
<!-- databaseId에 따라 자동으로 DB설정됨 -->
<insert id="insert" parameterType="Member" databaseId="oracle">
    <selectKey keyProperty="id" resultType="int" order="BEFORE">
        select member_id_seq.nextval from dual
    </selectKey>
    insert into member 
    (
    	id,
    	email,
    	password, 
    	name,
    	regdate
    )
    values
    (
    	#{id},
    	#{email},
    	#{password},
    	#{name},
    	#{regdate}
    	
    )
</insert>

<insert id="insert" parameterType="Member" useGeneratedKeys="true" keyProperty="id" keyColumn="id" databaseId="mysql">
    insert into member 
    (
    	email,
    	password, 
    	name,
    	regdate
    )
    values
    (
    	#{email},
    	#{password},
    	#{name},
    	#{regdate}
    )
</insert>

<!-- 동적 SQL -->
<update id="update" parameterType="Member">
    update member
    <set>
        <if test="password != null">
			password = #{password},
        </if>
        <if test="name != null">
			name = #{name},
        </if>
        <if test="regdate != null">
			regdate = #{regdate}
        </if>
    </set>
	where id 	= #{id}
	  and email = #{email}
</update>

<delete id="deleteById" parameterType="int">
    delete from member 
    	where id = #{id} 
</delete>

<delete id="deleteByEmail" parameterType="string">
    delete from member 
    	where email = #{email} 
</delete>

</mapper>
